#########################################################################
#
# General settings (see end of this file for an explanation of the syntax)
#

background(#283848)
labelColor(#70D0D0)
labelAdjust(0.9)



##########################################################################
#
# Autopilot
#
# This is a more sophisticated version of the 5-column autopilot that is
# the default for this program. Note how that clicking on one of the central
# red buttons will transfer the value there into the corresponding numeric
# field to its left. Note also the use of xVIS to help with flipping various
# screens.
#

instrument(Autopilot)
columns(15)
width(625)
height(256)

push btn(xVIEW PAN:sim/view/forward_with_panel)
push btn(xVIEW HUD:sim/view/forward_with_hud)
push btn(xVIEW C3D:sim/view/3d_cockpit_cmnd_look)
push btn(xVIEW TWR:sim/view/tower)
push btn(xVIEW BAC:sim/view/chase)

push gap()
push btn(xJXM ND)
push btn(x430 GPS)
push btn(xVIS MFD[lower,fpln,arpt,rtu,bleed,cab,elec,hydr,fuel,apu,air,wheel,fctl,sys,stat])
push btn(xVIS XTRA[Radios,GPS,Calibrate,Info,blank])

txt(xAOT T) gap(2)  gap()           gap()           gap(2)  txt(cMARK)  gap(3)  btn(aAP)   lab(RA:)    txt(cRA)          lab(DH:)   txt(cDH)    gap(3)  btn(mAPP)  btn(sARPT)
pull()      gap(2)  btn(cGUP G\s\^) btn(cFUP F\s\^) gap(2)  btn(hGPS)   gap(3)  num(nALT)              txt(cALT #B00000) btn(aALT)  btn(aVNAV)  gap(3)  btn(mVOR)  btn(sWPT)
pull()      gap(2)  txt(cGEAR)      txt(cFLAP)      gap(2)  btn(hNAV1)  gap(3)  num(nHDG)              txt(cHDG #B00000) btn(aHDG)  btn(aNAV)   gap(3)  btn(mMAP)  btn(sVOR)
pull()      gap(2)  btn(cGDN G\s\v) btn(cFDN F\s\v) gap(2)  btn(hNAV2)  gap(3)  num(nVS)               txt(cVS  #B00000) btn(aVS)   btn(aWLV)   gap(3)  btn(mNAV)  btn(sNDB)
pull()      gap(2)  btn(cBRK)       btn(cPH)        gap(2)  gap()       gap(3)  num(nTHR)              txt(cIAS #770077) btn(aTHR)  btn(aGS)    gap(3)  btn(mPLN)  btn(sTFC)
pull()      gap(2)  gap()           gap()           gap(2)  lab(GS:)    gap(3)  txt(cGS)   lab(AOA:)   txt(cAOA)         btn(aFLC)  btn(aBC)    gap(3)  btn(mCTR)  btn(sPOS)
gap()       gap(2)  pull()          pull()          gap(2)  lab(ETE:)   gap(3)  txt(cETE)  lab(PWR:)   txt(xPPWR)        gap()      btn(cYD)    gap(3)  gap()      btn(sDATA)
pull()      gap(2)  pull()          pull()          gap(2)  lab(DIS:)   gap(3)  txt(cDIST) lab(Trim:)  txt(cPTCH)        txt(cYAW)  txt(cROLL)  gap(3)  num(nZOOM)



##########################################################################
#
# Commentator
#
# This is a general kind of annunciator panel, though the focus is as much
# on trying to spot pilot errors as hardware faults. It is called the
# commentator panel because it makes a commentary on what the pilot is
# doing. The general idea is that for most of the flight, nothing should
# appear here. Therefore, when anything does appear it might be significant.
# Green entries indicate normal conditions,, yellow things that may be of
# concern, and red are for conditions that might "ruin your whole day..."
# When an item appears in this window, an explanation of its meaning will
# appear if you left click on it.
#
# You may wish to adjust some of the warning messages in the Commander
# preferences.
#

instrument(Commentator)
columns(10)
width(800)
height(60)

btn(xCOMM)



##########################################################################
#
# Radios
#
# This is kind of boring, but it is a heck of a lot less boring that trying
# to twiddle some of the X-Plane aircraft knobs. Use right click to set KHz
# values and auto-repeat to speed up ADF digits.

instrument(Radios)
background(#485868)
columns(8)
width(510)
height(150)

lab(COM1:)   btn(rCURR COM1 #00B000)   num(rSDBY COM1)
lab(COM2:)   btn(rCURR COM2 #00B000)   num(rSDBY COM2)
lab(NAV1:)   btn(rCURR NAV1 #00B000)   num(rSDBY NAV1)
lab(NAV2:)   btn(rCURR NAV2 #00B000)   num(rSDBY NAV2)
lab(ADF1:)   btn(rCURR ADF1 #00B000)   num(rSDBY ADF1)
lab(ADF2:)   btn(rCURR ADF2 #00B000)   num(rSDBY ADF2)

btn(rXPDR #00B0B0 IDENT)
gap()
btn(rXPDR #0000B0 0)
btn(rXPDR #0000B0 1)
btn(rXPDR #0000B0 2)
btn(rXPDR #0000B0 3)
gap()
btn(rXPDR #00B0B0 M)



##########################################################################
#
# GPS
#
# Alternate controls for the Garmin 430/530 GPS, Created mainly because of
# the large number of times I have hit the CRSR button by accident while
# trying to turn the inner knob. Note the num() fields here do not change
# when the up and down buttons are pressed and so the test field suppled
# here never changes. If the text field starts and ends with underscore
# characters, these are removed and the text is then centered in the
# available area.
#

instrument(GPS)
columns(6)
width(400)
height(140)

lab(OBS1:)     num(cOBS1)                    lab(OBS2:)       num(cOBS2)
btn(gVFF V<>)  btn(gCFF C<>)  btn(gDTO D->)  btn(gMENU MENU)  num(gZOOM _ZOOM_)
num(gFREQ _C/V_)              btn(gCLR CLR)  btn(gENT ENT)    num(gCHPG _CRSR_)
btn(gCDI CDI)  btn(gOBS OBS)  btn(gMSG MSG)  btn(gFPL FPL)    btn(gVNAV VNAV)  btn(gPROC PROC)



##########################################################################
#
# Info
#
# Here are some useful things for fuel endurance, but this instrument is
# also a graveyard for those buttons that did not get assigned to a more
# prominent instrument. Left click the Baro window  to set it to standard
# pressure and right click to swap between IN and HPA modes.
#

instrument(Info)
columns(4)
width(260)
height(200)


lab(Baro:)   gap()        num(cBARO)
lab(Time:)   txt(xTIME)   lab(Wind:)   txt(cWVEC)
lab(GS:)     txt(cGS)     lab(TAT:)    txt(cTAT)
lab(Fuel:)   txt(cFUEL)   lab(F/nm:)   txt(cFPMN)
lab(Flow:)   txt(cFF)     lab(Flow%:)  txt(cFFP)
lab(Endu:)   txt(cENDU)   lab(Dist:)   txt(cRNGE)



##########################################################################
#
# Power calibration
#
# Here the value for the xPPWR (percentage power) button (above) is
# calculated by using some engine parameter (selected here) and comparing
# it to maximum limit. To set it up, select one of the buttons below and
# either set the maximum value, or alternatively set maximum throttle and
# right click the red button to transfer the value across.
#

instrument(Calibrate)
columns(4)
width(250)
height(250)

gap()        lab(Value)       lab(Max)  gap()
lab(N1:)     txt(xPSET N1)    num(xPROP powerMaxN1)
lab(EPR:)    txt(xPSET EPR)   num(xPROP powerMaxEPR)
lab(TRQ:)    txt(xPSET TRQ)   num(xPROP powerMaxTRQ)
lab(MAP:)    txt(xPSET MAP)   num(xPROP powerMaxMAP)
lab(PROP:)   txt(xPSET RPM)   num(xPROP powerMaxRPM)
lab(FF:)     txt(xPSET FF)    num(xPROP powerMaxFF)



##########################################################################
#
# Syntax:
#
#     <item>(<parameter> <parameter> ...) ...
#
# Where <item> is one of:
#
# instrument(<name>)     - Start the definition of a new instrument panel
# background(#<color>)   - Set the background color
# columns(<number>)      - Define the number of button columns
# width(<number>)        - Specify the preferred width
# height(<number>)       - Specify the preferred height
# labelColor(#<color>)   - Specify the text color for labels
# labelAdjust(<number>)  - Specify the font size reduction for label text
# gap()                  - Leave a gap in the current row (uses one column width)
# lab(<text>)            - Create a label                 (uses one column width)
# btn(<id> [<parm(s)>])  - Create a fixed text button     (uses one column width)
# txt(<id> [<parm(s)>])  - Create a variable text button  (uses one column width)
# num(<id> [<parm(s)>])  - Create numeric field           (uses two column widths)
#
# The last three items are the interesting ones. The <id> field specifies one
# of around  sixty odd Java classes that define a button in an instrument. Each
# one  of these has a generalized name in the form "xXXX", where the initial
# lowercase letter is a used to group the buttons functionally, and the remaining
# letters are (by default) used for the text of the button.
#
# The groups are:
#
#    aXXX - Autopilot function
#    cXXX - Aircraft function
#    nXXX - Numeric windows
#    hXXX - HSI source
#    mXXX - ND map mode
#    sXXX - ND map symbols
#    rXXX - Radio function
#    gXXX - GPS function
#    xXXX - Something else
#
# Many buttons are quite specific, and rather than trying to document them all here,
# it is probably simpler (and more accurate) to look at the code in the Buttons.java
# file. There are however a few general things worth mentioning. All buttons, by
# default, get there own name as text, So for example:
#
#    btn(aALT)
#
# will get the text "ALT" written on it. The text can however be changed, so:
#
#    btn(aNAV LOC)
#
# will use the code in the class aNAV but will have "LOC" written on it. Another
# generalized parameter can specify the button's background color; so:
#
#    btn(aVNAV #808080)
#
# will cause the button to be gray, rather than black (which is the default). Both
# of the above options work the same for "txt" buttons. In fact the only real
# difference between "btn" and "txt" is that the latter has a default button color
# that is the same as the background color of the panel.
#
# There are four special buttons:
#
# xAOT  - This toggles the "always on top" status of all the windows. However, it
#         hides the primary XHSI window when active. Right clicking on this button
#         will toggle the display of the popup Garmin 430/530 GPS window.
#
# xCOMM - This is the "commentator" window where various kinds of annunciator type
#         items will appear. This button will consume the width of all the remaining
#         columns in it's row.
#
# xVIS  - This cycles through a specified list of instrument names, making one of them
#         visible at a time. Right click to hide the active window. The parameters for
#         this button are:
#
#             <text>'['<name>,<name>,...']'
#
#         where <text> is the text to appear on the button, and <name> is the name
#               of an instrument or the name of a sub-instrument in the MFD.
#
# Many buttons will do different things with a right click, again look at the code
# to see (it is hopefully pretty easy to understand, even for non-programmers). A
# search for "boolean right" in the "Buttons.java" file will quickly get you to all
# the right click code. All the buttons on the adjustable numeric fields (buttons
# specified as "num") will respond to right clicks in various ways. This often
# producing a larger (typically "times ten") change in value. These buttons also
# respond to a "repeat hold," when he mouse is held down that will produce a
# "times five" change in value every 100 milliseconds.
#
# Adding a new button is be pretty easy, and to do so one must add a new class
# in Buttons.java (or one can make a separate Java file, see xCOMM.java for an
# example), and then specify where is should appear in this file. (The Java
# class search order is first to look for a separate class file and then to look
# for one that has been specified in Buttons.java. This means button specified
# in Buttons.java can be overridden by creating separate Java file with the
# same class name.)
#
# Apart from the various methods to do things like set button's color, or the
# color its bounding box etc. (which should be fairly obvious from looking at
# some of the code for existing buttons), it is worth knowing about the code in
# the file Analisys.java. This class defines an instance record that is created
# on every time some X-Plane data is updated. This is done once only for all
# the instruments, which has two potential advantages: a) repeated identical
# calculations of can be avoided (saving time), and b) it is sometimes easier
# to work out the logic what several related buttons in one place.
